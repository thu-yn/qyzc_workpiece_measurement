<?xml version="1.0"?>
<!--
文件名: package.xml
文件作用: ROS包的元数据描述文件，定义包的基本信息、依赖关系和构建规则

主要功能需求:
1. 定义包的基本信息（名称、版本、描述、维护者等）
2. 声明所有构建时依赖项（build_depend）
3. 声明所有运行时依赖项（exec_depend）
4. 声明导出依赖项（build_export_depend）
5. 支持包管理工具的自动依赖解析

重要作用:
- 包发现和识别：让ROS系统能够识别和加载这个包
- 依赖管理：自动解析和安装所需的依赖包
- 版本控制：支持包的版本管理和兼容性检查
- 文档生成：为rosdoc、roswiki等工具提供信息
- 包分发：支持apt、rosdep等包管理系统

设计原则:
- 完整性：声明所有必需的依赖项
- 准确性：避免过度依赖和缺失依赖
- 兼容性：遵循ROS包管理标准
- 可维护性：清晰的结构和注释
-->

<!-- ROS包格式版本2：支持更细粒度的依赖管理 -->
<package format="2">
  
  <!-- ===== 包基本信息 ===== -->
  
  <!-- 包名称：必须与目录名和CMakeLists.txt中的project()一致 -->
  <name>pose_measurement</name>
  
  <!-- 版本号：遵循语义化版本规范 (major.minor.patch) -->
  <!-- 0.1.0 表示初始开发版本，功能基本完成但可能还有改进空间 -->
  <version>0.1.0</version>
  
  <!-- 包描述：简洁明了地说明包的主要功能 -->
  <description>3D Pose Estimation and Measurement System</description>

  <!-- 维护者信息：负责包维护和技术支持的人员 -->
  <!-- email属性用于联系和bug报告 -->
  <maintainer email="thu.yangnan@outlook.com">Yangnan</maintainer>
  
  <!-- 开源许可证：MIT许可证允许商业使用和修改 -->
  <!-- 常见选择：MIT, BSD, Apache-2.0, GPL-3.0 -->
  <license>MIT</license>

  <!-- ===== 构建工具依赖 ===== -->
  
  <!-- catkin：ROS的标准构建系统 -->
  <!-- 所有catkin包都需要这个依赖 -->
  <buildtool_depend>catkin</buildtool_depend>

  <!-- ===== 构建时依赖 (build_depend) ===== -->
  <!-- 编译时需要的包和库，包括头文件、静态库等 -->
  
  <!-- ROS核心包 -->
  <build_depend>roscpp</build_depend>             <!-- ROS C++客户端库 -->
  <build_depend>rospy</build_depend>              <!-- ROS Python客户端库 -->
  
  <!-- ROS消息类型包 -->
  <build_depend>std_msgs</build_depend>           <!-- 标准消息类型 -->
  <build_depend>sensor_msgs</build_depend>        <!-- 传感器消息（PointCloud2等） -->
  <build_depend>geometry_msgs</build_depend>      <!-- 几何消息（Transform等） -->
  
  <!-- PCL点云库集成包 -->
  <build_depend>pcl_conversions</build_depend>    <!-- PCL与ROS消息转换 -->
  <build_depend>pcl_ros</build_depend>            <!-- PCL在ROS中的集成 -->
  
  <!-- 坐标变换库 -->
  <build_depend>tf2</build_depend>                <!-- 变换库核心 -->
  <build_depend>tf2_ros</build_depend>            <!-- tf2的ROS接口 -->
  <build_depend>tf2_geometry_msgs</build_depend>  <!-- tf2几何消息支持 -->
  
  <!-- 系统级库依赖 -->
  <build_depend>libpcl-all-dev</build_depend>     <!-- PCL点云处理库开发包 -->
  <build_depend>libeigen3-dev</build_depend>      <!-- Eigen3线性代数库开发包 -->

  <!-- ===== 构建导出依赖 (build_export_depend) ===== -->
  <!-- 当其他包依赖本包时，这些包也需要被传递依赖 -->
  <!-- 主要是头文件和接口相关的依赖 -->
  
  <!-- ROS核心包导出 -->
  <build_export_depend>roscpp</build_export_depend>
  <build_export_depend>rospy</build_export_depend>
  
  <!-- ROS消息类型包导出 -->
  <build_export_depend>std_msgs</build_export_depend>
  <build_export_depend>sensor_msgs</build_export_depend>
  <build_export_depend>geometry_msgs</build_export_depend>
  
  <!-- PCL集成包导出 -->
  <build_export_depend>pcl_conversions</build_export_depend>
  <build_export_depend>pcl_ros</build_export_depend>
  
  <!-- 坐标变换库导出 -->
  <build_export_depend>tf2</build_export_depend>
  <build_export_depend>tf2_ros</build_export_depend>
  <build_export_depend>tf2_geometry_msgs</build_export_depend>

  <!-- ===== 运行时依赖 (exec_depend) ===== -->
  <!-- 运行时需要的包和库，包括动态库、节点等 -->
  
  <!-- ROS运行时核心 -->
  <exec_depend>roscpp</exec_depend>             <!-- C++运行时库 -->
  <exec_depend>rospy</exec_depend>              <!-- Python运行时库 -->
  
  <!-- ROS消息运行时 -->
  <exec_depend>std_msgs</exec_depend>           <!-- 标准消息运行时 -->
  <exec_depend>sensor_msgs</exec_depend>        <!-- 传感器消息运行时 -->
  <exec_depend>geometry_msgs</exec_depend>      <!-- 几何消息运行时 -->
  
  <!-- PCL运行时 -->
  <exec_depend>pcl_conversions</exec_depend>    <!-- PCL转换运行时 -->
  <exec_depend>pcl_ros</exec_depend>            <!-- PCL-ROS运行时 -->
  
  <!-- 变换库运行时 -->
  <exec_depend>tf2</exec_depend>                <!-- tf2运行时 -->
  <exec_depend>tf2_ros</exec_depend>            <!-- tf2-ROS运行时 -->
  <exec_depend>tf2_geometry_msgs</exec_depend>  <!-- tf2几何消息运行时 -->
  
  <!-- 系统库运行时 -->
  <exec_depend>libpcl-all-dev</exec_depend>     <!-- PCL库运行时 -->
  <exec_depend>libeigen3-dev</exec_depend>      <!-- Eigen3库运行时 -->

  <!-- ===== 导出信息 ===== -->
  <!-- 当前为空，可以在这里添加特殊的导出配置 -->
  <!-- 例如：插件配置、消息/服务定义、CMake配置等 -->
  <export>
    <!-- 如果有自定义消息或服务，可以在这里声明 -->
    <!-- 如果有插件，可以在这里配置插件XML -->
    <!-- 如果有特殊的CMake配置，可以在这里指定 -->
    
    <!-- 示例：如果有pluginlib插件
    <pluginlib plugin="${prefix}/plugins.xml" />
    -->
    
    <!-- 示例：如果有自定义的CMake配置
    <build_type>cmake</build_type>
    -->
  </export>
  
</package>

<!--
===== 依赖关系说明 =====

1. build_depend vs exec_depend vs build_export_depend:
   - build_depend: 编译时需要（头文件、静态库）
   - exec_depend: 运行时需要（动态库、可执行文件）
   - build_export_depend: 当其他包依赖本包时需要传递的依赖

2. 为什么某些包同时出现在三类依赖中:
   - roscpp: 编译时需要头文件，运行时需要动态库，导出时其他包也需要
   - pcl_ros: 同样需要编译、运行和导出支持

3. 系统库依赖策略:
   - libpcl-all-dev: 包含PCL的所有组件，简化依赖管理
   - libeigen3-dev: Eigen3数学库，线性代数计算必需

===== 版本管理策略 =====

当前版本：0.1.0
- 0.x.x: 开发版本，API可能变化
- 1.x.x: 稳定版本，向后兼容
- x.y.z: 语义化版本（主版本.次版本.修订版本）

版本升级规则：
- 修订版本(z): bug修复，向后兼容
- 次版本(y): 新功能，向后兼容
- 主版本(x): 重大变更，可能不兼容

===== 许可证选择说明 =====

MIT许可证特点：
- 允许商业使用
- 允许修改和再分发
- 要求保留版权声明
- 免责声明保护原作者

其他常见选择：
- BSD: 类似MIT，更简洁
- Apache-2.0: 更详细的专利保护
- GPL-3.0: 强制开源，传染性许可证

===== 维护最佳实践 =====

1. 定期更新依赖：
   - 跟踪上游包的更新
   - 测试新版本的兼容性
   - 及时修复安全漏洞

2. 版本管理：
   - 遵循语义化版本规范
   - 维护CHANGELOG文档
   - 标记重要的里程碑版本

3. 依赖最小化：
   - 只声明真正需要的依赖
   - 避免循环依赖
   - 定期审查和清理无用依赖

4. 文档维护：
   - 保持描述的准确性
   - 更新维护者信息
   - 记录重要的使用说明
-->